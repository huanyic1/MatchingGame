/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matchinggame;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 *
 * @author DELL
 */
public class MatchingFrame extends javax.swing.JFrame implements ActionListener {

    JButton[][] butArray = new JButton[4][4];
    int r1, c1, r2, c2;
    int first = 0; //keeps track of whether it is first or second button clicked
    int match; //variable to determine whether it is a match or not
    int numMatches; //variable to determine number of matches
    int[][] board = new int[4][4]; //array of ints to represent board
    int moves = 0; //counts how many moves a person has made

    /**
     * Creates new form MatchingFrame
     */
    public MatchingFrame() {
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GamePanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        MovesDisplay = new javax.swing.JTextField();
        ResultDisplay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Continue = new java.awt.Button();
        NewGame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 700));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 700));

        GamePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        GamePanel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        GamePanel.setPreferredSize(new java.awt.Dimension(500, 400));
        GamePanel.setLayout(new java.awt.GridLayout(4, 4, 10, 10));

        Title.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Matching Game");

        MovesDisplay.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        ResultDisplay.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ResultDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ResultDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultDisplayActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Moves");

        Continue.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Continue.setLabel("Continue");
        Continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueActionPerformed(evt);
            }
        });

        NewGame.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        NewGame.setText("New Game");
        NewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(GamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(NewGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Continue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MovesDisplay)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(ResultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MovesDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(Continue, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(NewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(ResultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResultDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultDisplayActionPerformed

    private void ContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueActionPerformed
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                butArray[a][b].setEnabled(true); //sets all the buttons to true again
                butArray[a][b].setFont(new Font("Arial", Font.CENTER_BASELINE, 30));
            }
        }
        if (match == 0) { //if there wasn't a match
            butArray[r1][c1].setText(" "); //clears the two buttons the clicked on
            butArray[r2][c2].setText(" ");
            butArray[r1][c1].setBackground(new Color(240, 240, 240)); //sets background color back to white
            butArray[r2][c2].setBackground(new Color(240, 240, 240));
        } else if (match == 1) {
            numMatches++; //if it is a match, increases number of matches by 1, keeps button at red to indicate that match has already been found
        }

        r1 = -1; //resets global variables keeping track of which button has been clicked
        c1 = -1;
        r2 = -1;
        c2 = -1;
        ResultDisplay.setText(""); //clears result display

        if (numMatches == 8) { //once we get 8 matches, we know game is over
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < 4; b++) {
                    butArray[a][b].setEnabled(false); //prevents users from clicking any more buttons now that game is over
                }
            }
            ResultDisplay.setText("You won! You took: " + Integer.toString(moves) + " moves"); //displays score, i.e. number of moves made
            Continue.setEnabled(false); //can't continue if game is over
        }
    }//GEN-LAST:event_ContinueActionPerformed

    private void NewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGameActionPerformed

        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                butArray[a][b].setText(" ");//clears all buttons
                  butArray[a][b].setFont(new Font("Arial", Font.CENTER_BASELINE, 30));
                butArray[a][b].setEnabled(true); //lets them click button again
                butArray[a][b].setBackground(new Color(240, 240, 240)); //resets background color to white
            }

            ResultDisplay.setText(""); //clears result display
            Continue.setEnabled(true); //allows continue button to be clicked again
            moves = 0; //resets all variables to 0 and display text to empty
            numMatches = 0;
            first = 0;
            match = 0;
            MovesDisplay.setText(Integer.toString(moves));
            board = CreateBoard(); //creates new scattered board for next game
        }
    }//GEN-LAST:event_NewGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Continue;
    private javax.swing.JPanel GamePanel;
    private javax.swing.JTextField MovesDisplay;
    private javax.swing.JButton NewGame;
    private javax.swing.JTextField ResultDisplay;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
public void initialize() {
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                butArray[r][c] = new JButton(); //creates an array of buttons
                butArray[r][c].addActionListener(this);
                butArray[r][c].setSize(50, 50);
                butArray[r][c].setBackground(new Color(240, 240, 240)); //sets default color to white
                 butArray[r][c].setFont(new Font("Arial", Font.CENTER_BASELINE, 30));
                butArray[r][c].setText(" "); // sets default display to spaces
                GamePanel.add(butArray[r][c]);
                MovesDisplay.setText(Integer.toString(moves)); //sets the number of moves made to 0
            }
        }

        board = CreateBoard(); //creates the board that the player will be playing on
    }

    @Override
    public void actionPerformed(ActionEvent ae) {

        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {

                if (ae.getSource() == butArray[r][c]) {
                    butArray[r][c].setBackground(new Color(200, 0, 0)); //once button is clicked, turns red to indicate it has been clicked
                    if (first % 2 == 0) { //has a global int to keep track of whether it is first or second button clicked
                        r1 = r;
                        c1 = c;
                        butArray[r][c].setText(Integer.toString(board[r][c])); //displays which number they clicked on
                        butArray[r][c].setEnabled(false); //prevents them for clicking on button that they have already clicked on again
                        first++; //increases first by one to indicate that first button has already been clicked

                    } else {
                        r2 = r;
                        c2 = c;
                        butArray[r][c].setText(Integer.toString(board[r][c])); //displays which number they clicked on
                        first++; //increases first by one to indicate that first button has already been clicked
                        if (board[r1][c1] == board[r2][c2]) {
                            ResultDisplay.setText("It is a match!");
                            match = 1;//keepstrack whether it is a match or not
                        } else {
                            ResultDisplay.setText("It is not a match!");
                            match = 0;
                        }
                        for (int a = 0; a < 4; a++) {
                            for (int b = 0; b < 4; b++) {
                                butArray[a][b].setEnabled(false);//once they have clicked two buttons, not allowed to click another button until they pess continue
                            }
                        }
                        moves++; //increases moves count
                        MovesDisplay.setText(Integer.toString(moves));
                    }
                }

            }
        }

    }

    public static int[][] CreateBoard() {
        Random r = new Random();

        int[][] board = new int[4][4];
        for (int r1 = 0; r1 < 4; r1++) {
            for (int c = 0; c < 4; c++) {
                board[r1][c] = -1;//initializes the board by filling it with negative 1's
            }
        }
        for (int i = 0; i < 16; i++) {
            int a = r.nextInt(4); //randomly generates where the number is going to be placed
            int b = r.nextInt(4);
            while (true) {
                if (board[a][b] != -1) {
                    a = r.nextInt(4); //regenerates the spot until it finds a spot that is not filled
                    b = r.nextInt(4);
                } else {
                    break;
                }
            }
            if (board[a][b] == -1) {
                board[a][b] = i / 2; //integer division truncates, ensuring two 0's, 2 1's, etc. 
            }

        }

        return board;
    }

}
